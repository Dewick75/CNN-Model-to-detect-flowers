# -*- coding: utf-8 -*-
"""CNN-Model-to-detect-flowers.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16VEieLiiel4eTJ2I8aeueMUnGI5EmoF2
"""

# Import libraries
import os
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
import matplotlib.pyplot as plt
import numpy as np
from tensorflow.keras.preprocessing import image

# 2. Data Preparation
train_dir = './Dataset'  # Local dataset path
img_size = (64, 64)
batch_size = 32

# Data augmentation and normalization
train_datagen = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2
)

# Load training data
train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=img_size,
    batch_size=batch_size,
    class_mode='categorical',
    subset='training'
)

# Load validation data
validation_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=img_size,
    batch_size=batch_size,
    class_mode='categorical',
    subset='validation'
)

# 3. Build CNN Model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 3)),
    MaxPooling2D(pool_size=(2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(pool_size=(2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(3, activation='softmax')
])

# Compile model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# 4. Train Model
history = model.fit(
    train_generator,
    epochs=10,
    validation_data=validation_generator
)

 #Display  Accuracy
final_train_accuracy = history.history['accuracy'][-1] * 100
final_val_accuracy = history.history['val_accuracy'][-1] * 100
print(f"Final Training Accuracy: {final_train_accuracy:.2f}%")
print(f"Final Validation Accuracy: {final_val_accuracy:.2f}%")

# 5. Plot Training and Validation Metrics
plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Accuracy')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Loss')
plt.legend()
plt.show()

# 7. Save the trained model
model.save('flower_classifier_model.h5')
print("Model saved as 'flower_classifier_model.h5'")

# 8. Test Model with a sample image from the dataset
# Get class names
class_names = list(train_generator.class_indices.keys())
print(f"Classes found: {class_names}")

# Test with a sample image from the dataset
sample_dir = os.path.join(train_dir, class_names[0])  # Take first class
sample_images = os.listdir(sample_dir)
if sample_images:
    sample_img_path = os.path.join(sample_dir, sample_images[0])

    # Load and preprocess the image
    img = image.load_img(sample_img_path, target_size=img_size)
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    # Predict
    prediction = model.predict(img_array)
    predicted_class = class_names[np.argmax(prediction)]
    confidence = np.max(prediction) * 100

    # Display image with predicted class
    plt.figure(figsize=(6, 4))
    plt.imshow(img)
    plt.axis('off')
    plt.title(f'Sample Image\nPredicted: {predicted_class} ({confidence:.1f}% confidence)')
    plt.show()
    print(f"Predicted flower: {predicted_class} with {confidence:.1f}% confidence")